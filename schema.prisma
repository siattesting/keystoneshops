// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(uuid()) @postgresql.Uuid
  name     String @default("")
  email    String @unique @default("")
  password String
  posts    Post[] @relation("Post_author")
}

model Post {
  id          String    @id @default(uuid()) @postgresql.Uuid
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author") @postgresql.Uuid
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(uuid()) @postgresql.Uuid
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Shop {
  id          String          @id @default(uuid()) @postgresql.Uuid
  title       String          @unique @default("")
  content     String          @default("")
  city        City?           @relation("Shop_city", fields: [cityId], references: [id])
  cityId      String?         @map("city") @postgresql.Uuid
  category    Category?       @relation("Shop_category", fields: [categoryId], references: [id])
  categoryId  String?         @map("category") @postgresql.Uuid
  publishedAt DateTime?       @default(now())
  status      ShopStatusType?

  @@index([cityId])
  @@index([categoryId])
}

model Category {
  id    String @id @default(uuid()) @postgresql.Uuid
  title String @unique @default("")
  shops Shop[] @relation("Shop_category")
}

model City {
  id        String   @id @default(uuid()) @postgresql.Uuid
  title     String   @unique @default("")
  country   Country? @relation("City_country", fields: [countryId], references: [id])
  countryId String?  @map("country") @postgresql.Uuid
  shops     Shop[]   @relation("Shop_city")

  @@index([countryId])
}

model Country {
  id     String @id @default(uuid()) @postgresql.Uuid
  title  String @unique @default("")
  cities City[] @relation("City_country")
}

enum ShopStatusType {
  published
  draft
}